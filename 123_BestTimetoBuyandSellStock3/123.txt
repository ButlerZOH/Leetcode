123.买卖股票的最佳时机 III
给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）
示例 1:
输入: [3,3,5,0,0,3,1,4]
输出: 6
解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。

示例 2:
输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   
注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   
因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。

示例 3:
输入: [7,6,4,3,1] 
输出: 0 
解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。


解法：
计算 dp[i][x] 时(这里的x表示任意状态)，只需要两个值：
dp[i-1][x]
dp[i-1][x-1] (if x>0)
即求完第i天的值后，就不需要第i-1天的数据了，dp数组是不断滚动更新的，所以我们可以用5个变量来代替二维数组。

dp0：初始化状态
dp1：第一次买入
dp2：第一次卖出
dp3：第二次买入
dp4：第二次卖出
根据上面的转换关系，我们来推到一下DP公式
首先是第一次买卖：

第一次买入：从初始状态转换而来，或者第一次买入后保持不动
dp1 = max(dp1,dp0-prices[i])     
第一次卖出：从第一次买入转换而来，或者第一次卖出后保持不动
dp2 = max(dp2,dp1+prices[i])
第二次买卖的DP推到如下：
第二次买入：从第一次卖出转换而来，或者第二次买入后保持不动
dp3= max(dp3,dp2-prices[i])
第二次卖出：从第二次买入转换而来，或者第二次卖出后保持不动
dp4 = max(dp4,dp3+prices[i])
最后求的利润最大值就保存在 d0、dp1、dp2、dp3、dp4中，我们求出这几个值的max再返回就可以了。
作者：wang_ni_ma

